var inp1 = [[1,1,0],[1,1,0],[0,0,1]], initial1 = [0,1];
var inp2 = [[1,0,0],[0,1,0],[0,0,1]], initial2 = [0,2];
var inp3 = [[1,1,1],[1,1,1],[1,1,1]], initial3 = [1,2];


var minMalwareSpread = function(graph, initial) {
    var malwares = new Set();
    initial.sort(function(a,b){return a-b});
    
    for(let i of initial){
    	if(!malwares.has(i)) malwares.add(i);
    }
    console.log(malwares);
    var max = 0;
    var res = initial[0];
    
    for(let i of initial){
    	console.log("....",i);
    	var containsOtherMal = [];
    	var visited = new Set();
    	
    	var count = dfs(i, i, graph, visited, containsOtherMal, malwares);
    	if(containsOtherMal[0]){
            continue;
        }
        if(count > max){
            max = count;
            res = i;
        }
    }
    return res;
};

function dfs(start, initialStart, graph, visited, containsOtherMal, malwares){
	console.log(start,initialStart, visited, containsOtherMal, malwares);
	if(visited.has(start) || containsOtherMal[0]) return 0;
	
	var res = 1;
	visited.add(start);
	console.log("here",visited, graph[start]);
	for(let i=0;i<graph[start].length;i++){
		console.log(">>>>>>>>>>", i, start, initialStart, graph[start][i],malwares.has(i));
		if(graph[start][i]==1){
			if(initialStart != i && malwares.has(i)){
				containsOtherMal[0] = true;
                break;
			}
			res += dfs(i, initialStart, graph, visited, containsOtherMal, malwares);
			console.log("res:",res);
		}
	}
	return res;
}

console.log("1: ",minMalwareSpread(inp1,initial1));
console.log("2: ",minMalwareSpread(inp2,initial2));
console.log("3: ",minMalwareSpread(inp3,initial3));

//https://leetcode.com/problems/minimize-malware-spread/discuss/194464/Java-easy-to-understand-DFS-solution-with-detailed-explanation